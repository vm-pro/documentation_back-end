// <auto-generated />
using System;
using Documentation_back_end.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Documentation_back_end.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250506084054_Host_nullable")]
    partial class Host_nullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Documentation_back_end.Domain.AccessMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HostId")
                        .HasColumnType("int");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HostId");

                    b.HasIndex("UserId");

                    b.ToTable("AccessMethods");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("LicenceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationCategoryId");

                    b.HasIndex("LicenceId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.ApplicationCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ApplicationCategories");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.ApplicationHost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeploymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("HostId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("HostId");

                    b.ToTable("ApplicationHosts");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.ApplicationServicePolice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("ServicePoliceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("ServicePoliceId");

                    b.ToTable("ApplicationServicesPolice");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.ChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChangeDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ChangeType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ChangeLog");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<int>("HostId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("HostId");

                    b.HasIndex("TemplateId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.Furnisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Furnishers");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.Host", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CpuCount")
                        .HasColumnType("int");

                    b.Property<string>("Criticality")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("FurnisherId")
                        .HasColumnType("int");

                    b.Property<bool>("IsVirtual")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastBackUp")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LocalisationId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Os")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RamGb")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("VsphereEnvironment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FurnisherId");

                    b.HasIndex("LocalisationId");

                    b.ToTable("Hosts");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.HostTool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConfigPath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("HostId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("ToolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HostId");

                    b.HasIndex("ToolId");

                    b.ToTable("HostTools");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.IpAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("IpSegmentId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("VlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IpSegmentId");

                    b.HasIndex("VlanId");

                    b.ToTable("IpAddresses");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.IpSegment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cidr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("IpSegments");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.Licence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Beginning")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Ending")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.ToTable("Licences");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.Localisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Localisations");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.Monitoring", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("HostId")
                        .HasColumnType("int");

                    b.Property<string>("Tool")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("HostId");

                    b.ToTable("Monitoring");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.Script", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("HostId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Schedule")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HostId");

                    b.HasIndex("UserId");

                    b.ToTable("Scripts");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConfigPath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("HostId")
                        .HasColumnType("int");

                    b.Property<int>("IpAddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("HostId");

                    b.HasIndex("IpAddressId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.ServicePolice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LocalisationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("LocalisationId");

                    b.ToTable("ServicesPolice");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Tool");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Matricule")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.Vlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("IpSegmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("VlanId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("IpSegmentId");

                    b.ToTable("Vlans");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.AccessMethod", b =>
                {
                    b.HasOne("Documentation_back_end.Domain.Host", "Host")
                        .WithMany("AccessMethods")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Documentation_back_end.Domain.User", "User")
                        .WithMany("AccessMethods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Host");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.Application", b =>
                {
                    b.HasOne("Documentation_back_end.Domain.ApplicationCategory", "ApplicationCategory")
                        .WithMany()
                        .HasForeignKey("ApplicationCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Documentation_back_end.Domain.Licence", "Licence")
                        .WithMany()
                        .HasForeignKey("LicenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationCategory");

                    b.Navigation("Licence");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.ApplicationHost", b =>
                {
                    b.HasOne("Documentation_back_end.Domain.Application", "Application")
                        .WithMany("ApplicationHosts")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Documentation_back_end.Domain.Host", "Host")
                        .WithMany("ApplicationHosts")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.ApplicationServicePolice", b =>
                {
                    b.HasOne("Documentation_back_end.Domain.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Documentation_back_end.Domain.ServicePolice", "ServicePolice")
                        .WithMany()
                        .HasForeignKey("ServicePoliceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("ServicePolice");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.Document", b =>
                {
                    b.HasOne("Documentation_back_end.Domain.Host", "Host")
                        .WithMany()
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Documentation_back_end.Domain.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Host");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.Host", b =>
                {
                    b.HasOne("Documentation_back_end.Domain.Category", "Category")
                        .WithMany("Hosts")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Documentation_back_end.Domain.Furnisher", "Furnisher")
                        .WithMany("Hosts")
                        .HasForeignKey("FurnisherId");

                    b.HasOne("Documentation_back_end.Domain.Localisation", "Localisation")
                        .WithMany("Hosts")
                        .HasForeignKey("LocalisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Furnisher");

                    b.Navigation("Localisation");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.HostTool", b =>
                {
                    b.HasOne("Documentation_back_end.Domain.Host", "Host")
                        .WithMany()
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Documentation_back_end.Domain.Tool", "Tool")
                        .WithMany("HostTools")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Host");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.IpAddress", b =>
                {
                    b.HasOne("Documentation_back_end.Domain.IpSegment", "IpSegment")
                        .WithMany("IpAddresses")
                        .HasForeignKey("IpSegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Documentation_back_end.Domain.Vlan", "Vlan")
                        .WithMany("IpAddresses")
                        .HasForeignKey("VlanId");

                    b.Navigation("IpSegment");

                    b.Navigation("Vlan");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.Localisation", b =>
                {
                    b.HasOne("Documentation_back_end.Domain.Localisation", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.Monitoring", b =>
                {
                    b.HasOne("Documentation_back_end.Domain.Host", "Host")
                        .WithMany()
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Host");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.Script", b =>
                {
                    b.HasOne("Documentation_back_end.Domain.Host", "Hosts")
                        .WithMany("Scripts")
                        .HasForeignKey("HostId");

                    b.HasOne("Documentation_back_end.Domain.User", "User")
                        .WithMany("Scripts")
                        .HasForeignKey("UserId");

                    b.Navigation("Hosts");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.Service", b =>
                {
                    b.HasOne("Documentation_back_end.Domain.Host", "Host")
                        .WithMany("Services")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Documentation_back_end.Domain.IpAddress", "IpAddress")
                        .WithMany("Services")
                        .HasForeignKey("IpAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Host");

                    b.Navigation("IpAddress");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.ServicePolice", b =>
                {
                    b.HasOne("Documentation_back_end.Domain.Localisation", "Localisation")
                        .WithMany()
                        .HasForeignKey("LocalisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Localisation");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.Vlan", b =>
                {
                    b.HasOne("Documentation_back_end.Domain.IpSegment", "IpSegment")
                        .WithMany("Vlans")
                        .HasForeignKey("IpSegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IpSegment");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.Application", b =>
                {
                    b.Navigation("ApplicationHosts");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.Category", b =>
                {
                    b.Navigation("Hosts");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.Furnisher", b =>
                {
                    b.Navigation("Hosts");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.Host", b =>
                {
                    b.Navigation("AccessMethods");

                    b.Navigation("ApplicationHosts");

                    b.Navigation("Scripts");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.IpAddress", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.IpSegment", b =>
                {
                    b.Navigation("IpAddresses");

                    b.Navigation("Vlans");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.Localisation", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Hosts");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.Tool", b =>
                {
                    b.Navigation("HostTools");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.User", b =>
                {
                    b.Navigation("AccessMethods");

                    b.Navigation("Scripts");
                });

            modelBuilder.Entity("Documentation_back_end.Domain.Vlan", b =>
                {
                    b.Navigation("IpAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
